<launch>
    <arg name="debug" default="0" doc="Sets the DEBUG flag for the uuv_simulator's plugins for verbose mode"/>

    <arg name="x" default="0" doc="X coordinate of the initial position to spawn the model (in ENU)"/>
    <arg name="y" default="0" doc="Y coordinate of the initial position to spawn the model (in ENU)"/>
    <arg name="z" default="0" doc="Z coordinate of the initial position to spawn the model (in ENU)"/>
    <arg name="roll" default="0.0" doc="Roll angle of the initial orientation to spawn the model (in ENU)"/>
    <arg name="pitch" default="0.0" doc="Pitch angle of the initial orientation to spawn the model (in ENU)"/>
    <arg name="yaw" default="0.0" doc="Yaw angle of the initial orientation to spawn the model (in ENU)"/>

    <arg name="use_geodetic" default="false"/>
    <arg name="latitude" default="0"/>
    <arg name="longitude" default="0"/>
    <arg name="depth" default="0"/>
    <arg name="latitude_ref" default="0"/>
    <arg name="longitude_ref" default="0"/>
    <arg name="altitude_ref" default="0"/>

    <arg name="use_ned_frame" default="true"/>
    <arg name="namespace" default="nemo"/>

    <group ns="$(arg namespace)">
        <group if="$(arg use_ned_frame)">
            <param name="robot_description"
                   command="$(find xacro)/xacro '$(find nemo)/urdf/nemo_current.xacro'
                            debug:=$(arg debug)
                            namespace:=$(arg namespace)
                            inertial_reference_frame:=world_ned" />
        </group>

        <group unless="$(arg use_ned_frame)">
            <param name="robot_description"
                   command="$(find xacro)/xacro '$(find nemo)/urdf/nemo_current.xacro'
                            debug:=$(arg debug)
                            namespace:=$(arg namespace)
                            inertial_reference_frame:=world" />
        </group>

        <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
        <group if="$(arg use_geodetic)">
            <node name="urdf_spawner" pkg="uuv_descriptions" type="spawn_model" respawn="false" output="screen"
                  args="-urdf -latitude $(arg latitude) -longitude $(arg longitude) -depth $(arg depth) -latitude_ref $(arg latitude_ref) -longitude_ref $(arg longitude_ref) -altitude_ref $(arg altitude_ref) -R $(arg roll) -P $(arg pitch) -Y $(arg yaw) -model $(arg namespace) -param /$(arg namespace)/robot_description"/>
        </group>

        <group unless="$(arg use_geodetic)">
            <node name="urdf_spawner" pkg="uuv_descriptions" type="spawn_model" respawn="false" output="screen"
                  args="-urdf -x $(arg x) -y $(arg y) -z $(arg z) -R $(arg roll) -P $(arg pitch) -Y $(arg yaw) -model $(arg namespace) -param /$(arg namespace)/robot_description"/>
        </group>

        <!-- A joint state publisher plugin already is started with the model, no need to use the default joint state publisher -->
        <!-- Publish robot model for ROS -->
        <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen">
            <param name="robot_description" value="/$(arg namespace)/robot_description" />
        </node>

        <!-- publish state and tf for in relation to the world frame -->
        <node name="ground_truth_to_tf_$(arg namespace)" pkg="nemo" type="msg_to_tf" output="screen">
<!--        <node name="ground_truth_to_tf_$(arg namespace)" pkg="message_to_tf" type="message_to_tf" output="screen">-->
            <param name="~odometry_topic" value="/$(arg namespace)/pose_gt" />
            <param name="~frame_id" value="world" />
            <param name="~stabilized_frame_id" value="/$(arg namespace)/base_stabilized" />
            <param name="~footprint_frame_id" value="/$(arg namespace)/base_footprint" />
            <param name="~child_frame_id" value="/$(arg namespace)/base_link" />
        </node>
    </group>
</launch>
